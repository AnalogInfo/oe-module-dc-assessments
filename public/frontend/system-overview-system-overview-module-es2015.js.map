{"version":3,"sources":["./src/app/admin/system-overview/models/system-overview.ts","./src/app/admin/system-overview/system-dashboard/system-dashboard.component.ts","./src/app/admin/system-overview/system-dashboard/system-dashboard.component.html","./src/app/admin/system-overview/services/system-report.service.ts","./src/app/admin/system-overview/system-overview-routing.module.ts","./src/app/admin/system-overview/models/author-agreement-item.ts","./src/app/admin/system-overview/models/system-revenue-item.ts","./src/app/admin/system-overview/system-overview.module.ts","./src/app/admin/system-overview/models/host-site.ts","./src/app/admin/system-overview/services/system-tools.service.ts"],"names":[],"mappings":"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","file":"system-overview-system-overview-module-es2015.js","sourcesContent":["/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { SystemRevenueItem } from \"./system-revenue-item\";\nimport { AuthorAgreementItem } from \"./author-agreement-item\";\nimport { HostSite } from \"./host-site\";\n\nexport class SystemOverview {\n    private _authorSummaries:any[] = [];\n\n    revenueItems:SystemRevenueItem[];\n    authorAgreementItems:AuthorAgreementItem[];\n    totalCompanies:number;\n    totalClients:number;\n    totalAssessmentsAssigned:number;\n    totalAssessmentsCompleted:number;\n    hostSite?:HostSite;\n    totalRevenue:number;\n    totalOrders:number;\n    totalFees:number;\n\n    // public getAuthorAgreementSummaries() {\n\n    //     // items for each other\n    //     // sum for the author\n    //     let itemsByAuthor = [];\n    //     this.authorAgreementItems.forEach(i => {\n    //         if (!itemsByAuthor[i.authorId]) {\n    //             itemsByAuthor[i.authorId] = {\n    //                 items: [],\n    //                 total: 0\n    //             };\n    //         }\n    //         itemsByAuthor[i.authorId].items.push(i);\n    //         itemsByAuthor[i.authorId].total += i.totalAuthorRevenue;\n    //     });\n    //     this._authorSummaries = itemsByAuthor;\n    // }\n}\n\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport {AlertService} from '../../../shared/services/alert.service';\nimport { Component, OnInit } from '@angular/core';\nimport { SystemReportService } from '../services/system-report.service';\nimport { SystemOverview } from '../models/system-overview';\nimport { HostSiteService } from '../../../shared/services/host-site.service';\nimport { AssessmentScaleFrequencyCount } from '../models/assessment-scale-frequency-count';\nimport { Scale } from '../../../shared/models/scale';\nimport { Assessment } from '../../../shared/models/assessment';\nimport { SystemToolsService } from '../services/system-tools.service';\n\n@Component({\n  selector: 'dac-system-dashboard',\n  templateUrl: './system-dashboard.component.html'\n})\nexport class SystemDashboardComponent implements OnInit {\n  private _data:SystemOverview;\n  private _hasLoadedData:boolean;\n  private _assessmentData:AssessmentScaleFrequencyCount;\n  public showAssessmentPicker:boolean;\n  public startDate:string;\n  public endDate:string;\n  public hostSiteId:number;\n  public searchGeneratorRecordsCount:number;\n\n  /**\n   * The id to generate search index entries for a company\n   */\n  public searchGeneratorCompanyId:number;\n\n  /**\n   * The id to generate user search index entries for a company\n   */\n  public searchGeneratorUserId:number;\n\n  private _assessment:Assessment;\n  private _hostSites:any[];\n\n  constructor(private reportService:SystemReportService,\n    private alertService:AlertService,\n    private hostSiteService:HostSiteService,\n    private systemTools:SystemToolsService) {\n    this.reset();\n    this.showAssessmentPicker = false;\n  }\n\n  ngOnInit() {\n    this._hasLoadedData = false;\n    this._data = new SystemOverview;\n    this.loadData();\n  }\n\n  private loadData() {\n    let alertId = this.alertService.info(\"Loading system data\", 90000);\n    let startDate = this.startDate && this.startDate.trim() != \"\" ? new Date(this.startDate + \" 00:00:00\") : new Date(0);\n    let endDate = this.endDate && this.endDate.trim() != \"\" ? new Date(this.endDate + \" 11:59:59\") : new Date();\n    let hostSiteId = this.hostSiteId != 0 ? +this.hostSiteId : null;\n    Promise.all([\n      this.reportService.getSystemOverviewByDate(startDate, endDate, this.hostSiteId)\n      ,Promise.resolve([]) // this.hostSiteService.getHostSites()\n    ])\n    .then((results) => {\n      let [data, hostSites] = results;\n      this._hostSites = hostSites;\n      this._data = data;\n      this._hasLoadedData = true;\n      this.alertService.clearAlert(alertId);\n    })\n    .catch((error) => {\n      console.error(error);\n      this.alertService.error(\"Failed to load data from system\");\n      this.alertService.clearAlert(alertId);\n    });\n  }\n\n  public get assessment() {\n    return this._assessment;\n  }\n\n  public get HostSites() {\n    return this._hostSites;\n  }\n\n  public filter() {\n    this.loadData();\n  }\n  public reset() {\n    this.hostSiteId = null;\n    this.startDate = \"\";\n    this.endDate = \"\";\n  }\n  get SystemOverview() {\n    return this._data;\n  }\n\n  get hasLoadedData() {\n    return this._hasLoadedData;\n  }\n  get AssessmentData() {\n    return this._assessmentData;\n  }\n\n  get AssessmentScales() {\n    return this._assessmentData.frequencies.keys();\n  }\n  getScaleFrequencies(scale:Scale) {\n    let frequencies = this._assessmentData.frequencies.get(scale);\n\n    let sortedFrequencies = Object.keys(frequencies).map(i => +i).sort((a,b) => a - b);\n    let total = sortedFrequencies.reduce((prev, current) => prev + frequencies[current], 0);\n    let results = sortedFrequencies.map(i => {\n      return {\"score\": i.toString(), \"frequency\": frequencies[i]};\n    });\n    results.push({\"score\": \"Total\", \"frequency\": total});\n    return results;\n  }\n\n  public getAssessmentData() {\n\n    if (!this._assessment) {\n      this.alertService.error(\"Please choose an assessment for the report\");\n      return;\n    }\n\n    let alertId = this.alertService.info(\"Loading system data\", 90000);\n    let startDate = this.startDate && this.startDate.trim() != \"\" ? new Date(this.startDate + \" 00:00:00\") : new Date(0);\n    let endDate = this.endDate && this.endDate.trim() != \"\" ? new Date(this.endDate + \" 11:59:59\") : new Date();\n    let hostSiteId = this.hostSiteId != 0 ? +this.hostSiteId : null;\n    this.reportService.getSystemAssessmentData(this._assessment.uid, startDate, endDate, hostSiteId).then((data:any) => {\n      this._assessmentData = data;\n      this._hasLoadedData = true;\n      this.alertService.clearAlert(alertId);\n    })\n    .catch((error) => {\n      console.error(error);\n      this.alertService.clearAlert(alertId);\n      this.alertService.error(\"Check console for error there was an error in loading your data\");\n    });\n\n  }\n\n  public toggleAssessmentPicker() {\n    this.showAssessmentPicker = !this.showAssessmentPicker;\n  }\n\n  public updateAssessment(assessment:Assessment) {\n    this._assessment = assessment;\n    this.toggleAssessmentPicker();\n  }\n\n  generateSearch() {\n    let searchCompanyId = +this.searchGeneratorCompanyId;\n    let userId= +this.searchGeneratorUserId;\n    if (isNaN(searchCompanyId) || searchCompanyId < 1) {\n      this.alertService.error(\"Company id must be a valid number\");\n      return;\n    }\n    if (isNaN(userId) || userId < 1) {\n      this.alertService.error(\"User id must be a valid number\");\n      return;\n    }\n    let info = this.alertService.info(\"Generating data....\", 60000);\n    this.systemTools.generateSearch(searchCompanyId, userId).then((resp) => {\n      this.alertService.clearAlert(info);\n      this.alertService.success(\"Data generated\");\n    })\n    .catch(error => {\n      console.error(error);\n      this.alertService.error(\"Failed to generate data\");\n    });\n  }\n\n  generateRandomSearch() {\n    let searchCompanyId = +this.searchGeneratorCompanyId;\n    let userId= +this.searchGeneratorUserId;\n    let recordsToGenerate = +this.searchGeneratorRecordsCount;\n    if (isNaN(searchCompanyId) || searchCompanyId < 1) {\n      this.alertService.error(\"Company id must be a valid number\");\n      return;\n    }\n    if (isNaN(userId) || userId < 1) {\n      this.alertService.error(\"User id must be a valid number\");\n      return;\n    }\n    if (isNaN(recordsToGenerate) || recordsToGenerate > 5500) {\n      this.alertService.error(\"Records to generate is required and must be less than 5500\");\n      return;\n    }\n    recordsToGenerate = Math.max(recordsToGenerate, 0);\n    let batchCount = 0;\n    let batchSize = 25;\n    let maxBatches = recordsToGenerate / batchSize;\n    let generateBatch = () => {\n      if (batchCount++ >= maxBatches) {\n        return;\n      }\n      let info = this.alertService.info(\"Generating batch data \"+ batchCount, 60000);\n      this.systemTools.generateSearch(searchCompanyId, userId, batchSize).then((resp) => {\n        this.alertService.clearAlert(info);\n        this.alertService.success(\"Data generated for batch \" + batchCount);\n        generateBatch();\n      })\n      .catch(error => {\n        console.error(error);\n        this.alertService.error(\"Failed to generate data\");\n      });\n    }\n    generateBatch();\n  }\n\n}\n","<dac-tabs class=\"col-12\">\n  <dac-tab heading=\"Revenue Overview\">\n    <h1>Filter by host site</h1>\n    <select class='browser-default' [(ngModel)]=\"hostSiteId\">\n      <option value=\"0\">All Sites</option>\n      <option *ngFor=\"let site of HostSites\" [ngValue]=\"site.id\">{{site.name}}</option>\n    </select>\n    <h1>\n      Search by date\n    </h1>\n    <p>start date </p>\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"startDate\" required />\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"endDate\" required />\n\n\n\n    <input type=\"button\" value=\"Filter\" (click)=\"filter()\" />\n    <input type=\"button\" value=\"Reset\" (click)=\"reset()\" />\n\n    <div class='card card-body'>\n      <h1>Overview</h1>\n      Total New Companies:\n      <span>{{SystemOverview.totalCompanies}}</span>\n      Total New Clients:\n      <span>{{SystemOverview.totalClients}}</span>\n      Total New Assessments:\n      <span>{{SystemOverview.totalAssessmentsAssigned}}</span>\n      Total New Assessments Completed:\n      <span>{{SystemOverview.totalAssessmentsCompleted}}</span>\n      Total New Revenue\n      <span>{{SystemOverview.totalRevenue}}</span>\n      Total Fees\n      <span>{{SystemOverview.totalFees}}</span>\n      Total New Orders\n      <span>{{SystemOverview.totalOrders}}</span>\n      <div *ngIf=\"hostSiteId != 0\">\n        Host Site Revenue\n        <span>{{SystemOverview.hostSiteRevenue}}</span>\n      </div>\n    </div>\n\n    <div class='card card-body'>\n      <h1 class=\"h1-responsive\">Revenue by Items</h1>\n      <table class='table table-striped'>\n        <thead class=\"secondary-color text-light\">\n          <tr>\n            <td>Item Name</td>\n            <td>Item Type (bundle/item)</td>\n            <td>Total Revenue</td>\n            <td># sold</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of SystemOverview.revenueItems\">\n            <td>{{item.name}}</td>\n            <td>{{item.type}}</td>\n            <td>{{item.totalRevenue | currency}}</td>\n            <td>{{item.soldCount}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"card card-body\">\n      <h1>Assessments with agreements</h1>\n      <table class='table table-striped'>\n        <thead class=\"secondary-color text-light\">\n          <tr>\n            <td>Item Name</td>\n            <td>Type</td>\n            <td>Agreement Author</td>\n            <td>Sold Count</td>\n            <td>Total Revenue</td>\n            <td>Author(s) Revenue Share %</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of SystemOverview.authorAgreementItems\">\n            <td>{{item.name}}</td>\n            <td>{{item.type}}</td>\n            <td>{{item.author}}</td>\n            <td>{{item.soldCount}}</td>\n            <td>{{item.totalRevenue | currency}}</td>\n            <td>{{item.totalAuthorRevenue | currency}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </dac-tab>\n  <dac-tab heading=\"Assessments Data Overview\">\n    <h1>Filter by host site</h1>\n    <select class='browser-default' [(ngModel)]=\"hostSiteId\">\n      <option value=\"0\">All Sites</option>\n      <option *ngFor=\"let site of HostSites\" [ngValue]=\"site.id\">{{site.name}}</option>\n    </select>\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"startDate\" required />\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"endDate\" required />\n    <div class=\"row\">\n      <div class=\"col\">\n        <input type=\"button\" class=\"btn btn-secondary\" *ngIf=\"showAssessmentPicker\" value=\"Close Assessment Picker\" (click)=\"toggleAssessmentPicker()\"\n        />\n        <dac-assessment-picker *ngIf=\"showAssessmentPicker\" (selected)=\"updateAssessment($event)\"></dac-assessment-picker>\n        <input type=\"button\" class=\"btn btn-secondary\" *ngIf=\"!showAssessmentPicker\" value=\"Choose Assessment\" (click)=\"toggleAssessmentPicker()\"\n        />\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"assessment\">\n      <div class=\"col\">\n        <h2>Assessment: {{assessment.name}}</h2>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input type=\"button\" class=\"btn btn-primary\" value=\"Load Data\" (click)=\"getAssessmentData()\" />\n      </div>\n    </div>\n    <div *ngIf=\"AssessmentData\">\n      <h1>{{AssessmentData.assessment.name}}</h1>\n      <div class=\"row\" *ngFor=\"let scale of AssessmentScales\">\n        <div class=\"card card-body\">\n          <h2>{{scale.name}}</h2>\n          <div class=\"row primary-color text-light\">\n            <div class=\"col\">Scale Score</div>\n            <div class=\"col\">Frequency Count</div>\n          </div>\n          <div class=\"row\" [ngClass]=\"{'mdb-color lighten-5': index % 2 == 0}\" *ngFor=\"let frequency of getScaleFrequencies(scale); let index = index;\">\n            <div class=\"col\">{{frequency.score}}</div>\n            <div class=\"col\">{{frequency.frequency}}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </dac-tab>\n  <dac-tab heading=\"Tools\">\n    <h1>Search Generator</h1>\n    <input type=\"text\" [(ngModel)]=\"searchGeneratorCompanyId\" placeholder=\"Company id...\" />\n    <input type=\"text\" [(ngModel)]=\"searchGeneratorUserId\" placeholder=\"User id...\" />\n    <input type=\"button\" value=\"Generate\" (click)=\"generateSearch()\" />\n    <h1>Random Search Generator Options</h1>\n    <input type=\"text\" [(ngModel)]=\"searchGeneratorRecordsCount\" placeholder=\"Records to generate\" />\n    <input type=\"button\" value=\"Generate\" (click)=\"generateRandomSearch()\" />\n  </dac-tab>\n</dac-tabs>\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { Injectable } from '@angular/core';\n// TODO: stephen only used for mocking the service right now...\nimport { HTTPService } from '../../../shared/services/http.service';\nimport { SystemRevenueItem } from '../models/system-revenue-item';\nimport { AuthorAgreementItem } from '../models/author-agreement-item';\nimport { HostSite } from '../models/host-site';\nimport { SystemOverview } from '../models/system-overview';\nimport { AssessmentService } from '../../../shared/services/assessment.service';\nimport { Assessment } from '../../../shared/models/assessment';\nimport {AssessmentStatisticFrequencyCount} from \"../models/assessment-statistic-frequency-count\";\nimport {AssessmentScaleFrequencyCount, FrequencyCount} from \"../models/assessment-scale-frequency-count\";\nimport { Scale } from '../../../shared/models/scale';\n\n@Injectable()\nexport class SystemReportService {\n\n    constructor(private http:HTTPService, private assessmentService:AssessmentService) {\n    }\n\n    getHostSites() : Promise<HostSite[]> {\n        return Promise.resolve([]);\n    }\n\n    getSystemAssessmentData(uid:string, startDate:Date, endDate:Date, hostSiteId?:number) : Promise<AssessmentScaleFrequencyCount> {\n        let path = \"/admin/system/assessment/\";\n\n        let data = {\n            host: hostSiteId\n            ,uid: uid\n            ,start:startDate.getTime()\n            ,end: endDate.getTime()\n        };\n\n        let getStatData = this.http.get(path, data).then((json) => {\n            return json;\n        });\n        // we merge the data together this way.\n        let getAssessment = this.assessmentService.getAssessment(uid);\n        return Promise.all([getStatData, getAssessment]).then((results) => {\n            let statData = results[0] as AssessmentStatisticFrequencyCount;\n            let assessment = results[1] as Assessment;\n            let frequencies = new Map<Scale, FrequencyCount>();\n            Object.keys(statData.frequencyCounts).forEach(scaleId => {\n                frequencies.set(assessment.scales.find(s => s.id == scaleId), statData.frequencyCounts[scaleId]);\n            })\n\n            let counts:AssessmentScaleFrequencyCount = {\n                assessment:results[1] as Assessment\n                ,frequencies: frequencies\n            };\n            return counts;\n        })\n    }\n\n    getSystemOverview(hostSiteId?:number) : Promise<SystemOverview> {\n        return this.getSystemOverviewByDate(new Date(0), new Date(), hostSiteId);\n    }\n\n    getSystemOverviewByDate(start:Date, end:Date, hostSiteId?:number) : Promise<SystemOverview>{\n        let path = \"/admin/system/\";\n        let query = \"?\";\n        let params = [];\n        if (hostSiteId) {\n            params.push(\"host=\" + +hostSiteId);\n        }\n\n        params.push(\"start=\" +  start.getTime());\n        params.push(\"end=\" + end.getTime());\n        query = query + params.join(\"&\");\n\n        let data = new SystemOverview();\n        data.authorAgreementItems = [1,2,3,4,5].map((i) => {\n            return Object.assign(new AuthorAgreementItem(), {name: \"HBI-19\", bundleCount: i, soldCount: i\n                        , totalRevenue: i * 10, authorRevenue: i * 5, systemRevenue: i * 5});\n        });\n        data.revenueItems = [1,2,3,4,5,6,7].map((i) => {\n            return Object.assign(new SystemRevenueItem(), {name: \"HBI-19\", type: (i % 2 == 0 ? \"Bundle\" : \"Item\")\n            , soldCount: i, totalRevenue: i * 100, totalFees: i * 5, hostSiteRevenue: i * 40, systemRevenue: i * 60 });\n        })\n        data.hostSite = Object.assign(new HostSite(), {id: 1, name: \"Discover and Change\"});\n        data.totalAssessmentsAssigned = 5;\n        data.totalAssessmentsCompleted = 5;\n        data.totalClients = 15;\n        data.totalCompanies = 30;\n        data.totalRevenue = 3500;\n        // return Promise.resolve(data);\n\n        return this.http.get<SystemOverview>(path + query).then((json) => {\n            return json;\n        });\n    }\n\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SystemDashboardComponent } from './system-dashboard/system-dashboard.component';\n\nconst routes : Routes = [\n  {path: '',component: SystemDashboardComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class SystemOverviewRoutingModule { }\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nexport class AuthorAgreementItem {\n    name:string;\n    type:string;\n    soldCount:number;\n    totalRevenue:number;\n    author:string;\n    totalAuthorRevenue:number;\n    authorId:number;\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nexport class SystemRevenueItem {\n    name:string;\n    type:\"Bundle\"|\"Item\";\n    soldCount:number;\n    totalRevenue:number;\n    totalFees:number;\n    hostSiteRevenue?:number;\n    systemRevenue?:number;\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport {SharedModule} from '../../shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SystemDashboardComponent } from './system-dashboard/system-dashboard.component';\nimport {SystemOverviewRoutingModule} from \"./system-overview-routing.module\";\nimport { SystemReportService } from './services/system-report.service';\nimport { SystemToolsService } from './services/system-tools.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n    ,SharedModule\n    ,SystemOverviewRoutingModule\n  ],\n  providers: [SystemReportService, SystemToolsService],\n  declarations: [SystemDashboardComponent]\n})\nexport class SystemOverviewModule { }\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nexport class HostSite {\n    id:number;\n    name:string;\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { Injectable } from \"@angular/core\";\nimport { HTTPService } from '../../../shared/services/http.service';\n\n@Injectable()\nexport class SystemToolsService {\n\n    constructor(private http:HTTPService) {}\n\n    generateSearch(companyId:number, userId:number, recordsToGenerate?:number) {\n        let path = \"/admin/system/tools/generateSearch\";\n\n        return this.http.post(path, {companyId: companyId, userId:userId, recordsToGenerate:recordsToGenerate});\n    }\n}\n"],"sourceRoot":"webpack:///"}