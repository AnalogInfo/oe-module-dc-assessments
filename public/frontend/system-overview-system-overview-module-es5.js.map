{"version":3,"sources":["webpack:///src/app/admin/system-overview/models/system-overview.ts","webpack:///src/app/admin/system-overview/system-dashboard/system-dashboard.component.ts","webpack:///src/app/admin/system-overview/system-dashboard/system-dashboard.component.html","webpack:///src/app/admin/system-overview/services/system-report.service.ts","webpack:///src/app/admin/system-overview/system-overview-routing.module.ts","webpack:///src/app/admin/system-overview/models/author-agreement-item.ts","webpack:///src/app/admin/system-overview/models/system-revenue-item.ts","webpack:///src/app/admin/system-overview/system-overview.module.ts","webpack:///src/app/admin/system-overview/models/host-site.ts","webpack:///src/app/admin/system-overview/services/system-tools.service.ts"],"names":["SystemOverview","_authorSummaries","SystemDashboardComponent","reportService","alertService","hostSiteService","systemTools","reset","showAssessmentPicker","_hasLoadedData","_data","loadData","alertId","info","startDate","trim","Date","endDate","hostSiteId","Promise","all","getSystemOverviewByDate","resolve","then","results","data","hostSites","_hostSites","clearAlert","error","console","scale","frequencies","_assessmentData","get","sortedFrequencies","Object","keys","map","i","sort","a","b","total","reduce","prev","current","toString","push","_assessment","getSystemAssessmentData","uid","assessment","toggleAssessmentPicker","searchCompanyId","searchGeneratorCompanyId","userId","searchGeneratorUserId","isNaN","generateSearch","resp","success","recordsToGenerate","searchGeneratorRecordsCount","Math","max","batchCount","batchSize","maxBatches","generateBatch","filter","getAssessmentData","generateRandomSearch","selector","templateUrl","SystemReportService","http","assessmentService","path","host","start","getTime","end","getStatData","json","getAssessment","statData","Map","frequencyCounts","forEach","scaleId","set","scales","find","s","id","counts","query","params","join","authorAgreementItems","assign","name","bundleCount","soldCount","totalRevenue","authorRevenue","systemRevenue","revenueItems","type","totalFees","hostSiteRevenue","hostSite","totalAssessmentsAssigned","totalAssessmentsCompleted","totalClients","totalCompanies","routes","component","SystemOverviewRoutingModule","forChild","imports","exports","AuthorAgreementItem","SystemRevenueItem","SystemOverviewModule","providers","declarations","HostSite","SystemToolsService","companyId","post"],"mappings":"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","file":"system-overview-system-overview-module-es5.js","sourcesContent":["/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { SystemRevenueItem } from \"./system-revenue-item\";\nimport { AuthorAgreementItem } from \"./author-agreement-item\";\nimport { HostSite } from \"./host-site\";\n\nexport class SystemOverview {\n    private _authorSummaries:any[] = [];\n\n    revenueItems:SystemRevenueItem[];\n    authorAgreementItems:AuthorAgreementItem[];\n    totalCompanies:number;\n    totalClients:number;\n    totalAssessmentsAssigned:number;\n    totalAssessmentsCompleted:number;\n    hostSite?:HostSite;\n    totalRevenue:number;\n    totalOrders:number;\n    totalFees:number;\n\n    // public getAuthorAgreementSummaries() {\n\n    //     // items for each other\n    //     // sum for the author\n    //     let itemsByAuthor = [];\n    //     this.authorAgreementItems.forEach(i => {\n    //         if (!itemsByAuthor[i.authorId]) {\n    //             itemsByAuthor[i.authorId] = {\n    //                 items: [],\n    //                 total: 0\n    //             };\n    //         }\n    //         itemsByAuthor[i.authorId].items.push(i);\n    //         itemsByAuthor[i.authorId].total += i.totalAuthorRevenue;\n    //     });\n    //     this._authorSummaries = itemsByAuthor;\n    // }\n}\n\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport {AlertService} from '../../../shared/services/alert.service';\nimport { Component, OnInit } from '@angular/core';\nimport { SystemReportService } from '../services/system-report.service';\nimport { SystemOverview } from '../models/system-overview';\nimport { HostSiteService } from '../../../shared/services/host-site.service';\nimport { AssessmentScaleFrequencyCount } from '../models/assessment-scale-frequency-count';\nimport { Scale } from '../../../shared/models/scale';\nimport { Assessment } from '../../../shared/models/assessment';\nimport { SystemToolsService } from '../services/system-tools.service';\n\n@Component({\n  selector: 'dac-system-dashboard',\n  templateUrl: './system-dashboard.component.html'\n})\nexport class SystemDashboardComponent implements OnInit {\n  private _data:SystemOverview;\n  private _hasLoadedData:boolean;\n  private _assessmentData:AssessmentScaleFrequencyCount;\n  public showAssessmentPicker:boolean;\n  public startDate:string;\n  public endDate:string;\n  public hostSiteId:number;\n  public searchGeneratorRecordsCount:number;\n\n  /**\n   * The id to generate search index entries for a company\n   */\n  public searchGeneratorCompanyId:number;\n\n  /**\n   * The id to generate user search index entries for a company\n   */\n  public searchGeneratorUserId:number;\n\n  private _assessment:Assessment;\n  private _hostSites:any[];\n\n  constructor(private reportService:SystemReportService,\n    private alertService:AlertService,\n    private hostSiteService:HostSiteService,\n    private systemTools:SystemToolsService) {\n    this.reset();\n    this.showAssessmentPicker = false;\n  }\n\n  ngOnInit() {\n    this._hasLoadedData = false;\n    this._data = new SystemOverview;\n    this.loadData();\n  }\n\n  private loadData() {\n    let alertId = this.alertService.info(\"Loading system data\", 90000);\n    let startDate = this.startDate && this.startDate.trim() != \"\" ? new Date(this.startDate + \" 00:00:00\") : new Date(0);\n    let endDate = this.endDate && this.endDate.trim() != \"\" ? new Date(this.endDate + \" 11:59:59\") : new Date();\n    let hostSiteId = this.hostSiteId != 0 ? +this.hostSiteId : null;\n    Promise.all([\n      this.reportService.getSystemOverviewByDate(startDate, endDate, this.hostSiteId)\n      ,Promise.resolve([]) // this.hostSiteService.getHostSites()\n    ])\n    .then((results) => {\n      let [data, hostSites] = results;\n      this._hostSites = hostSites;\n      this._data = data;\n      this._hasLoadedData = true;\n      this.alertService.clearAlert(alertId);\n    })\n    .catch((error) => {\n      console.error(error);\n      this.alertService.error(\"Failed to load data from system\");\n      this.alertService.clearAlert(alertId);\n    });\n  }\n\n  public get assessment() {\n    return this._assessment;\n  }\n\n  public get HostSites() {\n    return this._hostSites;\n  }\n\n  public filter() {\n    this.loadData();\n  }\n  public reset() {\n    this.hostSiteId = null;\n    this.startDate = \"\";\n    this.endDate = \"\";\n  }\n  get SystemOverview() {\n    return this._data;\n  }\n\n  get hasLoadedData() {\n    return this._hasLoadedData;\n  }\n  get AssessmentData() {\n    return this._assessmentData;\n  }\n\n  get AssessmentScales() {\n    return this._assessmentData.frequencies.keys();\n  }\n  getScaleFrequencies(scale:Scale) {\n    let frequencies = this._assessmentData.frequencies.get(scale);\n\n    let sortedFrequencies = Object.keys(frequencies).map(i => +i).sort((a,b) => a - b);\n    let total = sortedFrequencies.reduce((prev, current) => prev + frequencies[current], 0);\n    let results = sortedFrequencies.map(i => {\n      return {\"score\": i.toString(), \"frequency\": frequencies[i]};\n    });\n    results.push({\"score\": \"Total\", \"frequency\": total});\n    return results;\n  }\n\n  public getAssessmentData() {\n\n    if (!this._assessment) {\n      this.alertService.error(\"Please choose an assessment for the report\");\n      return;\n    }\n\n    let alertId = this.alertService.info(\"Loading system data\", 90000);\n    let startDate = this.startDate && this.startDate.trim() != \"\" ? new Date(this.startDate + \" 00:00:00\") : new Date(0);\n    let endDate = this.endDate && this.endDate.trim() != \"\" ? new Date(this.endDate + \" 11:59:59\") : new Date();\n    let hostSiteId = this.hostSiteId != 0 ? +this.hostSiteId : null;\n    this.reportService.getSystemAssessmentData(this._assessment.uid, startDate, endDate, hostSiteId).then((data:any) => {\n      this._assessmentData = data;\n      this._hasLoadedData = true;\n      this.alertService.clearAlert(alertId);\n    })\n    .catch((error) => {\n      console.error(error);\n      this.alertService.clearAlert(alertId);\n      this.alertService.error(\"Check console for error there was an error in loading your data\");\n    });\n\n  }\n\n  public toggleAssessmentPicker() {\n    this.showAssessmentPicker = !this.showAssessmentPicker;\n  }\n\n  public updateAssessment(assessment:Assessment) {\n    this._assessment = assessment;\n    this.toggleAssessmentPicker();\n  }\n\n  generateSearch() {\n    let searchCompanyId = +this.searchGeneratorCompanyId;\n    let userId= +this.searchGeneratorUserId;\n    if (isNaN(searchCompanyId) || searchCompanyId < 1) {\n      this.alertService.error(\"Company id must be a valid number\");\n      return;\n    }\n    if (isNaN(userId) || userId < 1) {\n      this.alertService.error(\"User id must be a valid number\");\n      return;\n    }\n    let info = this.alertService.info(\"Generating data....\", 60000);\n    this.systemTools.generateSearch(searchCompanyId, userId).then((resp) => {\n      this.alertService.clearAlert(info);\n      this.alertService.success(\"Data generated\");\n    })\n    .catch(error => {\n      console.error(error);\n      this.alertService.error(\"Failed to generate data\");\n    });\n  }\n\n  generateRandomSearch() {\n    let searchCompanyId = +this.searchGeneratorCompanyId;\n    let userId= +this.searchGeneratorUserId;\n    let recordsToGenerate = +this.searchGeneratorRecordsCount;\n    if (isNaN(searchCompanyId) || searchCompanyId < 1) {\n      this.alertService.error(\"Company id must be a valid number\");\n      return;\n    }\n    if (isNaN(userId) || userId < 1) {\n      this.alertService.error(\"User id must be a valid number\");\n      return;\n    }\n    if (isNaN(recordsToGenerate) || recordsToGenerate > 5500) {\n      this.alertService.error(\"Records to generate is required and must be less than 5500\");\n      return;\n    }\n    recordsToGenerate = Math.max(recordsToGenerate, 0);\n    let batchCount = 0;\n    let batchSize = 25;\n    let maxBatches = recordsToGenerate / batchSize;\n    let generateBatch = () => {\n      if (batchCount++ >= maxBatches) {\n        return;\n      }\n      let info = this.alertService.info(\"Generating batch data \"+ batchCount, 60000);\n      this.systemTools.generateSearch(searchCompanyId, userId, batchSize).then((resp) => {\n        this.alertService.clearAlert(info);\n        this.alertService.success(\"Data generated for batch \" + batchCount);\n        generateBatch();\n      })\n      .catch(error => {\n        console.error(error);\n        this.alertService.error(\"Failed to generate data\");\n      });\n    }\n    generateBatch();\n  }\n\n}\n","<dac-tabs class=\"col-12\">\n  <dac-tab heading=\"Revenue Overview\">\n    <h1>Filter by host site</h1>\n    <select class='browser-default' [(ngModel)]=\"hostSiteId\">\n      <option value=\"0\">All Sites</option>\n      <option *ngFor=\"let site of HostSites\" [ngValue]=\"site.id\">{{site.name}}</option>\n    </select>\n    <h1>\n      Search by date\n    </h1>\n    <p>start date </p>\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"startDate\" required />\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"endDate\" required />\n\n\n\n    <input type=\"button\" value=\"Filter\" (click)=\"filter()\" />\n    <input type=\"button\" value=\"Reset\" (click)=\"reset()\" />\n\n    <div class='card card-body'>\n      <h1>Overview</h1>\n      Total New Companies:\n      <span>{{SystemOverview.totalCompanies}}</span>\n      Total New Clients:\n      <span>{{SystemOverview.totalClients}}</span>\n      Total New Assessments:\n      <span>{{SystemOverview.totalAssessmentsAssigned}}</span>\n      Total New Assessments Completed:\n      <span>{{SystemOverview.totalAssessmentsCompleted}}</span>\n      Total New Revenue\n      <span>{{SystemOverview.totalRevenue}}</span>\n      Total Fees\n      <span>{{SystemOverview.totalFees}}</span>\n      Total New Orders\n      <span>{{SystemOverview.totalOrders}}</span>\n      <div *ngIf=\"hostSiteId != 0\">\n        Host Site Revenue\n        <span>{{SystemOverview.hostSiteRevenue}}</span>\n      </div>\n    </div>\n\n    <div class='card card-body'>\n      <h1 class=\"h1-responsive\">Revenue by Items</h1>\n      <table class='table table-striped'>\n        <thead class=\"secondary-color text-light\">\n          <tr>\n            <td>Item Name</td>\n            <td>Item Type (bundle/item)</td>\n            <td>Total Revenue</td>\n            <td># sold</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of SystemOverview.revenueItems\">\n            <td>{{item.name}}</td>\n            <td>{{item.type}}</td>\n            <td>{{item.totalRevenue | currency}}</td>\n            <td>{{item.soldCount}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n\n    <div class=\"card card-body\">\n      <h1>Assessments with agreements</h1>\n      <table class='table table-striped'>\n        <thead class=\"secondary-color text-light\">\n          <tr>\n            <td>Item Name</td>\n            <td>Type</td>\n            <td>Agreement Author</td>\n            <td>Sold Count</td>\n            <td>Total Revenue</td>\n            <td>Author(s) Revenue Share %</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr *ngFor=\"let item of SystemOverview.authorAgreementItems\">\n            <td>{{item.name}}</td>\n            <td>{{item.type}}</td>\n            <td>{{item.author}}</td>\n            <td>{{item.soldCount}}</td>\n            <td>{{item.totalRevenue | currency}}</td>\n            <td>{{item.totalAuthorRevenue | currency}}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </dac-tab>\n  <dac-tab heading=\"Assessments Data Overview\">\n    <h1>Filter by host site</h1>\n    <select class='browser-default' [(ngModel)]=\"hostSiteId\">\n      <option value=\"0\">All Sites</option>\n      <option *ngFor=\"let site of HostSites\" [ngValue]=\"site.id\">{{site.name}}</option>\n    </select>\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"startDate\" required />\n    <input type=\"text\" [placeholder]=\"'Date Format YYYY-MM-DD'\" [(ngModel)]=\"endDate\" required />\n    <div class=\"row\">\n      <div class=\"col\">\n        <input type=\"button\" class=\"btn btn-secondary\" *ngIf=\"showAssessmentPicker\" value=\"Close Assessment Picker\" (click)=\"toggleAssessmentPicker()\"\n        />\n        <dac-assessment-picker *ngIf=\"showAssessmentPicker\" (selected)=\"updateAssessment($event)\"></dac-assessment-picker>\n        <input type=\"button\" class=\"btn btn-secondary\" *ngIf=\"!showAssessmentPicker\" value=\"Choose Assessment\" (click)=\"toggleAssessmentPicker()\"\n        />\n      </div>\n    </div>\n\n    <div class=\"row\" *ngIf=\"assessment\">\n      <div class=\"col\">\n        <h2>Assessment: {{assessment.name}}</h2>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <input type=\"button\" class=\"btn btn-primary\" value=\"Load Data\" (click)=\"getAssessmentData()\" />\n      </div>\n    </div>\n    <div *ngIf=\"AssessmentData\">\n      <h1>{{AssessmentData.assessment.name}}</h1>\n      <div class=\"row\" *ngFor=\"let scale of AssessmentScales\">\n        <div class=\"card card-body\">\n          <h2>{{scale.name}}</h2>\n          <div class=\"row primary-color text-light\">\n            <div class=\"col\">Scale Score</div>\n            <div class=\"col\">Frequency Count</div>\n          </div>\n          <div class=\"row\" [ngClass]=\"{'mdb-color lighten-5': index % 2 == 0}\" *ngFor=\"let frequency of getScaleFrequencies(scale); let index = index;\">\n            <div class=\"col\">{{frequency.score}}</div>\n            <div class=\"col\">{{frequency.frequency}}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  </dac-tab>\n  <dac-tab heading=\"Tools\">\n    <h1>Search Generator</h1>\n    <input type=\"text\" [(ngModel)]=\"searchGeneratorCompanyId\" placeholder=\"Company id...\" />\n    <input type=\"text\" [(ngModel)]=\"searchGeneratorUserId\" placeholder=\"User id...\" />\n    <input type=\"button\" value=\"Generate\" (click)=\"generateSearch()\" />\n    <h1>Random Search Generator Options</h1>\n    <input type=\"text\" [(ngModel)]=\"searchGeneratorRecordsCount\" placeholder=\"Records to generate\" />\n    <input type=\"button\" value=\"Generate\" (click)=\"generateRandomSearch()\" />\n  </dac-tab>\n</dac-tabs>\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { Injectable } from '@angular/core';\n// TODO: stephen only used for mocking the service right now...\nimport { HTTPService } from '../../../shared/services/http.service';\nimport { SystemRevenueItem } from '../models/system-revenue-item';\nimport { AuthorAgreementItem } from '../models/author-agreement-item';\nimport { HostSite } from '../models/host-site';\nimport { SystemOverview } from '../models/system-overview';\nimport { AssessmentService } from '../../../shared/services/assessment.service';\nimport { Assessment } from '../../../shared/models/assessment';\nimport {AssessmentStatisticFrequencyCount} from \"../models/assessment-statistic-frequency-count\";\nimport {AssessmentScaleFrequencyCount, FrequencyCount} from \"../models/assessment-scale-frequency-count\";\nimport { Scale } from '../../../shared/models/scale';\n\n@Injectable()\nexport class SystemReportService {\n\n    constructor(private http:HTTPService, private assessmentService:AssessmentService) {\n    }\n\n    getHostSites() : Promise<HostSite[]> {\n        return Promise.resolve([]);\n    }\n\n    getSystemAssessmentData(uid:string, startDate:Date, endDate:Date, hostSiteId?:number) : Promise<AssessmentScaleFrequencyCount> {\n        let path = \"/admin/system/assessment/\";\n\n        let data = {\n            host: hostSiteId\n            ,uid: uid\n            ,start:startDate.getTime()\n            ,end: endDate.getTime()\n        };\n\n        let getStatData = this.http.get(path, data).then((json) => {\n            return json;\n        });\n        // we merge the data together this way.\n        let getAssessment = this.assessmentService.getAssessment(uid);\n        return Promise.all([getStatData, getAssessment]).then((results) => {\n            let statData = results[0] as AssessmentStatisticFrequencyCount;\n            let assessment = results[1] as Assessment;\n            let frequencies = new Map<Scale, FrequencyCount>();\n            Object.keys(statData.frequencyCounts).forEach(scaleId => {\n                frequencies.set(assessment.scales.find(s => s.id == scaleId), statData.frequencyCounts[scaleId]);\n            })\n\n            let counts:AssessmentScaleFrequencyCount = {\n                assessment:results[1] as Assessment\n                ,frequencies: frequencies\n            };\n            return counts;\n        })\n    }\n\n    getSystemOverview(hostSiteId?:number) : Promise<SystemOverview> {\n        return this.getSystemOverviewByDate(new Date(0), new Date(), hostSiteId);\n    }\n\n    getSystemOverviewByDate(start:Date, end:Date, hostSiteId?:number) : Promise<SystemOverview>{\n        let path = \"/admin/system/\";\n        let query = \"?\";\n        let params = [];\n        if (hostSiteId) {\n            params.push(\"host=\" + +hostSiteId);\n        }\n\n        params.push(\"start=\" +  start.getTime());\n        params.push(\"end=\" + end.getTime());\n        query = query + params.join(\"&\");\n\n        let data = new SystemOverview();\n        data.authorAgreementItems = [1,2,3,4,5].map((i) => {\n            return Object.assign(new AuthorAgreementItem(), {name: \"HBI-19\", bundleCount: i, soldCount: i\n                        , totalRevenue: i * 10, authorRevenue: i * 5, systemRevenue: i * 5});\n        });\n        data.revenueItems = [1,2,3,4,5,6,7].map((i) => {\n            return Object.assign(new SystemRevenueItem(), {name: \"HBI-19\", type: (i % 2 == 0 ? \"Bundle\" : \"Item\")\n            , soldCount: i, totalRevenue: i * 100, totalFees: i * 5, hostSiteRevenue: i * 40, systemRevenue: i * 60 });\n        })\n        data.hostSite = Object.assign(new HostSite(), {id: 1, name: \"Discover and Change\"});\n        data.totalAssessmentsAssigned = 5;\n        data.totalAssessmentsCompleted = 5;\n        data.totalClients = 15;\n        data.totalCompanies = 30;\n        data.totalRevenue = 3500;\n        // return Promise.resolve(data);\n\n        return this.http.get<SystemOverview>(path + query).then((json) => {\n            return json;\n        });\n    }\n\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { SystemDashboardComponent } from './system-dashboard/system-dashboard.component';\n\nconst routes : Routes = [\n  {path: '',component: SystemDashboardComponent }\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forChild(routes)\n  ],\n  exports: [\n    RouterModule\n  ]\n})\nexport class SystemOverviewRoutingModule { }\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nexport class AuthorAgreementItem {\n    name:string;\n    type:string;\n    soldCount:number;\n    totalRevenue:number;\n    author:string;\n    totalAuthorRevenue:number;\n    authorId:number;\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nexport class SystemRevenueItem {\n    name:string;\n    type:\"Bundle\"|\"Item\";\n    soldCount:number;\n    totalRevenue:number;\n    totalFees:number;\n    hostSiteRevenue?:number;\n    systemRevenue?:number;\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport {SharedModule} from '../../shared/shared.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SystemDashboardComponent } from './system-dashboard/system-dashboard.component';\nimport {SystemOverviewRoutingModule} from \"./system-overview-routing.module\";\nimport { SystemReportService } from './services/system-report.service';\nimport { SystemToolsService } from './services/system-tools.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n    ,SharedModule\n    ,SystemOverviewRoutingModule\n  ],\n  providers: [SystemReportService, SystemToolsService],\n  declarations: [SystemDashboardComponent]\n})\nexport class SystemOverviewModule { }\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nexport class HostSite {\n    id:number;\n    name:string;\n}\n","/*\n *   Copyright (c) 2022 Discover and Change @author Stephen Nielson <snielson@discoverandchange.com>\n *   All rights reserved.\n *   For License information see LICENSE.md in the root folder of this project.\n */\nimport { Injectable } from \"@angular/core\";\nimport { HTTPService } from '../../../shared/services/http.service';\n\n@Injectable()\nexport class SystemToolsService {\n\n    constructor(private http:HTTPService) {}\n\n    generateSearch(companyId:number, userId:number, recordsToGenerate?:number) {\n        let path = \"/admin/system/tools/generateSearch\";\n\n        return this.http.post(path, {companyId: companyId, userId:userId, recordsToGenerate:recordsToGenerate});\n    }\n}\n"]}