<?php

namespace OpenEMR\Modules\DiscoverAndChange\Assessments\Tests;

use OpenEMR\Common\Database\QueryUtils;
use OpenEMR\Common\Logging\SystemLogger;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\AssessmentGroupService;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\AssessmentReportRepository;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\AssessmentRepository;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\LibraryAssetBlobRepository;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\ResourceImporterService;
use OpenEMR\Validators\ProcessingResult;
use PHPUnit\Framework\TestCase;

class ResourceImporterServiceTest extends TestCase
{
    private static $importerUserName = "system";
    private const IMPORTER_USER_ID = 1;

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        QueryUtils::sqlStatementThrowException("DELETE FROM " . AssessmentReportRepository::TABLE_VERSION_NAME . " WHERE "
            . " report_id IN (SELECT id FROM " . AssessmentReportRepository::TABLE_NAME . " WHERE id LIKE 'phptest%')", [], true);
        QueryUtils::sqlStatementThrowException("DELETE FROM " . AssessmentReportRepository::TABLE_PERMISSION_NAME . " WHERE report_id LIKE 'phptest%'", [], true);
        QueryUtils::sqlStatementThrowException("DELETE FROM " . AssessmentReportRepository::TABLE_NAME . " WHERE id LIKE 'phptest%'", [], true);


        QueryUtils::sqlStatementThrowException("DELETE FROM " . AssessmentGroupService::ASSESSMENT_BLOB_JOIN_TABLE_NAME . " WHERE "
        . " assessmentgroup_id IN (SELECT id FROM " . AssessmentGroupService::TABLE_NAME . " WHERE name LIKE 'phptest%')", [], true);
        QueryUtils::sqlStatementThrowException("DELETE FROM " . AssessmentGroupService::TABLE_NAME . " WHERE name LIKE 'phptest%'", [], true);

        // delete the leaf assets last.
        QueryUtils::sqlStatementThrowException("DELETE FROM " . AssessmentRepository::TABLE_NAME . " WHERE uid LIKE 'phptest%'", [], true);
        QueryUtils::sqlStatementThrowException("DELETE FROM " . LibraryAssetBlobRepository::TABLE_NAME . " WHERE title LIKE 'phptest%'", [], true);
    }

    public function testImportAssessmentBlob()
    {
        $contents = file_get_contents(__DIR__ . "/../../../data/Unit/Services/import-assessmentblob.json");
        $json = json_decode($contents, true);
        $blobs = $json['AssessmentBlob'];
        $importer = new ResourceImporterService();
        $index = 0;
        $importer->importAssessmentBlobResources($blobs, $index);

        $this->assertEquals(count($blobs), $index, "All blobs should have been processed");
        $logEntries = $importer->getLogEntries();
        $this->assertEquals(count($blobs), count($importer->getLogEntries()), "All blobs should have been processed and stored in the logs");
        $this->assertEquals("success", $logEntries[0]->importStatus, "First blob should have been successful");
        $this->assertEquals("success", $logEntries[1]->importStatus, "Second blob should have been successful");
        $this->assertEquals("success", $logEntries[2]->importStatus, "Third blob should have been successful");

        $assessmentService = new AssessmentRepository(new SystemLogger());
        $assessment = $assessmentService->getAssessmentForUid($blobs[0]['_uid']);
        $this->assertNotEmpty($assessment);

        $assessment2 = $assessmentService->getAssessmentForUid($blobs[1]['_uid']);
        $this->assertNotEmpty($assessment2);

        $assessment3 = $assessmentService->getAssessmentForUid($blobs[2]['_uid']);
        $this->assertNotEmpty($assessment3);
    }

    public function testImportLibraryAssetResources()
    {
        $contents = file_get_contents(__DIR__ . "/../../../data/Unit/Services/import-libraryasset.json");
        $json = json_decode($contents, true);
        $blobs = $json['LibraryAsset'];
        $importer = new ResourceImporterService();
        $index = 0;
        $importer->importLibraryAssetResources($blobs, self::IMPORTER_USER_ID, $index);

        $this->assertEquals(count($blobs), $index, "All blobs should have been processed");
        $logEntries = $importer->getLogEntries();
        $this->assertEquals(count($blobs), count($importer->getLogEntries()), "All blobs should have been processed and stored in the logs");
        $this->assertEquals("success", $logEntries[0]->importStatus, "First blob should have been successful " . $logEntries[0]->error);
        $this->assertEquals("success", $logEntries[1]->importStatus, "Second blob should have been successful" . $logEntries[1]->error);

        $libraryAssetRepo = new LibraryAssetBlobRepository(new SystemLogger());
        $this->assertTrue($libraryAssetRepo->existsAsset($blobs[0]['title']), "Asset should exist");
        $this->assertTrue($libraryAssetRepo->existsAsset($blobs[1]['title']), "Asset should exist");
    }

    public function testImportAssessmentGroupResources()
    {
        $contents = file_get_contents(__DIR__ . "/../../../data/Unit/Services/import-assessmentgroup.json");
        $json = json_decode($contents, true);
        $groups = $json['AssessmentGroup'];
        $assessmentRepository = new AssessmentRepository(new SystemLogger());
        $assessmentRepository->createAssessment($groups[0]['_assessments'][0], "phptest1", 'phptest1', [], null);
        $assessmentRepository->createAssessment($groups[0]['_assessments'][1], "phptest2", 'phptest2', [], null);

        $importer = new ResourceImporterService();
        $importer->setAssessmentRepository($assessmentRepository);
        $index = 0;
        $importer->importAssessmentGroupResources($groups, self::IMPORTER_USER_ID, $index);
        $this->assertEquals(count($groups), $index, "All groups should have been processed");
        $logEntries = $importer->getLogEntries();
        $this->assertEquals("success", $logEntries[0]->importStatus, "First group should have been successful " . $logEntries[0]->error);
        $this->assertEquals("success", $logEntries[1]->importStatus, "Second group should have been successful" . $logEntries[1]->error);

        $groupRepo = new AssessmentGroupService();
        $data = ProcessingResult::extractDataArray($groupRepo->search(['name' => $groups[0]['_name']]));
        $this->assertNotEmpty($data, "Group 1 should exist");
        $data = ProcessingResult::extractDataArray($groupRepo->search(['name' => $groups[1]['_name']]));
        $this->assertNotEmpty($data, "Group 2 should exist");
    }
    public function testImportReport()
    {
        $contents = file_get_contents(__DIR__ . "/../../../data/Unit/Services/import-reports.json");
        $json = json_decode($contents, true);
        $reports = $json['Report'];

        $assessmentRepository = new AssessmentRepository(new SystemLogger());
        $companyId = null;
        $assessmentRepository->createAssessment("phptest-3", "phptest3", 'phptest3', [], $companyId);
        $assessmentRepository->createAssessment("phptest-4", "phptest4", 'phptest4', [], $companyId);
        $assessmentRepository->existsAssessment("phptest-4");

        $groupService = new AssessmentGroupService();
        $groupService->createGroup("phptest-Test Group 3", $companyId);


        $importer = new ResourceImporterService();
        $index = 0;
        $importer->importReports($reports, self::IMPORTER_USER_ID, $index);
        $logEntries = $importer->getLogEntries();
        $this->assertEquals(count($reports), $index, "All items should have been processed");
        $this->assertEquals("success", $logEntries[0]->importStatus, "First report should have been successful " . $logEntries[0]->error);
        $this->assertEquals("success", $logEntries[1]->importStatus, "Second report should have been successful" . $logEntries[1]->error);

        $reportService = new AssessmentReportRepository();
        $report = $reportService->getOne($reports[0]['_id']);
        $this->assertNotEmpty($report, "Report 1 should exist");

        $report2 = $reportService->getOne($reports[1]['_id']);
        $this->assertNotEmpty($report2, "Report 2 should exist");
    }
}
