<?php

namespace OpenEMR\Modules\DiscoverAndChange\Assessments\Tests\FhirServices;

use Monolog\Test\TestCase;
use OpenEMR\Common\Uuid\UuidRegistry;
use OpenEMR\FHIR\R4\FHIRDomainResource\FHIRQuestionnaire;
use OpenEMR\Modules\DiscoverAndChange\Assessments\DTO\LibraryAssetBlobDTO;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\FhirServices\LibraryAssetFHIRResourceService;
use OpenEMR\Modules\DiscoverAndChange\Assessments\Services\LibraryAssetBlobRepository;
use OpenEMR\Validators\ProcessingResult;
use Ramsey\Uuid\UuidFactory;

class LibraryAssetFHIRResourceServiceTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testSupportsCode()
    {
        $mock = $this->createMock(LibraryAssetBlobRepository::class);
        $service = new LibraryAssetFHIRResourceService($mock);
        $this->assertTrue($service->supportsCode(LibraryAssetFHIRResourceService::CODE_DAC_LIBRARY_ASSET));
        $this->assertFalse($service->supportsCode('foo'));
    }

    public function testParseOpenEMRRecord()
    {
        $factory = new UuidFactory();
        $uuid = $factory->uuid4();
        $libraryDTO = new LibraryAssetBlobDTO();
        $libraryDTO->setId(555);
        $libraryDTO->setUuid($uuid->toString());
        $libraryDTO->setTitle("Test title");
        $mock = $this->createMock(LibraryAssetBlobRepository::class);
        $service = new LibraryAssetFHIRResourceService($mock);
        $fhirQuestionaire = $service->parseOpenEMRRecord($libraryDTO->jsonSerialize());
        $this->assertInstanceOf(FHIRQuestionnaire::class, $fhirQuestionaire);
        $this->assertEquals($uuid->toString(), $fhirQuestionaire->getId()->getValue());

        $this->assertNotNull($fhirQuestionaire->getExtension());
        $extension = $fhirQuestionaire->getExtension()[0];
        $this->assertStringContainsString(LibraryAssetFHIRResourceService::CODE_DAC_LIBRARY_ASSET, $extension->getUrl());
    }
    public function testGetAllWithEmptyParameters()
    {
        $factory = new UuidFactory();
        $uuid = $factory->uuid4();
        $mock = $this->createMock(LibraryAssetBlobRepository::class);
        $processingResult = new ProcessingResult();
        $libraryDTO = new LibraryAssetBlobDTO();
        $libraryDTO->setId(555);
        $libraryDTO->setTitle("Test title");
        $libraryDTO->setUuid($uuid->toString());
        $processingResult->addData($libraryDTO->jsonSerialize());
        $mock->expects($this->once())
            ->method('search')
            ->with($this->equalTo([]))
            ->willReturn(
                $processingResult
            );
        $service = new LibraryAssetFHIRResourceService($mock);
        $results = $service->getAll([]);
        $this->assertTrue($results->hasData());
        $this->assertEquals(1, count($results->getData()), "Should return 1 result");
        $data = $results->getData();
        $this->assertEquals($uuid->toString(), $data[0]->getId()->getValue());
        $this->assertEquals("Test title", $data[0]->getTitle());

        $this->assertNotNull($data[0]->getExtension());
        $extension = $data[0]->getExtension()[0];
        $this->assertStringContainsString(LibraryAssetFHIRResourceService::CODE_DAC_LIBRARY_ASSET, $extension->getUrl());
        try {
            $json = json_decode($extension->getValueString(), true, 512, JSON_THROW_ON_ERROR);
            $this->assertEquals($uuid->toString(), $json['uuid']);
            $this->assertEquals("Test title", $json['title']);
        } catch (\JsonException $exception) {
            $this->fail("Failed to parse json from extension " . $exception->getMessage());
        }
    }
}
